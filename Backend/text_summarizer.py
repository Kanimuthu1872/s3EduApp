# -*- coding: utf-8 -*-
"""text summarizer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RbHggCLLeNvvQFrcUuBUBj58Eps-rmpN
"""

import spacy
from spacy.lang.en.stop_words import STOP_WORDS
from string import punctuation
from googletrans import Translator
from pydantic import BaseModel
# spacy.cli.download("en_core_web_sm")
nlp = spacy.load("en_core_web_sm")
stopwords = list(STOP_WORDS)
from typing import Union
from fastapi import FastAPI ,Request
from fastapi.middleware.cors import CORSMiddleware
app = FastAPI()
translator = Translator()
origins = ["*"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
punctuation=punctuation+'\n'
def Summaryday(text,punctuation):
    max_frequency=1
    doc=nlp(text)
    tokens=[token.text for token in doc]
    punctuation=punctuation+'\n'
    word_frequencies={}
    for word in doc:
        if word.text.lower()not in stopwords:
            if  word.text.lower()not in punctuation:
              if word.text not in word_frequencies.keys():
                  word_frequencies[word.text]=1
              else:
                  word_frequencies[word.text]+=1
                  max_frequency=max(word_frequencies.values())
    for word in word_frequencies.keys():
      word_frequencies[word]=word_frequencies[word]/max_frequency
      sentence_tokens=[sent for sent in doc.sents]
    sentence_scores={}
    for sent in sentence_tokens:
      for word in sent:
        if word.text.lower() in word_frequencies.keys():
          if sent not in sentence_scores.keys():
            sentence_scores[sent]=word_frequencies[word.text.lower()]
          else:
              sentence_scores[sent]+=word_frequencies[word.text.lower()]
    from heapq import nlargest
    select_length=int(len(sentence_tokens)*0.3)
    summary=nlargest(select_length,sentence_scores,key=sentence_scores.get)
    final_summary=[word.text for word in summary]
    summary=' '.join(final_summary)
    print(summary)
    return summary

@app.post("/items")
async def read_item(item:Request):
    req_info = await item.json()
    a=req_info['item_id']
    b= Summaryday(a,punctuation)
    print(b)
    return {"data": b}
# print(word_frequencies)
@app.post("/texttoaudio")
async def trans(item:Request):
    req_info = await item.json()
    a=req_info['item_id']
    b=req_info['language']
    print(a,b)
    if len(a)==0:
       return {"data":"processing please wait"}
    else:
      translation = translator.translate(a, dest=b)
      print(translation.text)
      return {"data":translation.text}

